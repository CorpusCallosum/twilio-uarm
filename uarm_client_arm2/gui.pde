/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void logo_icon_Click(GImageButton source, GEvent event) { //_CODE_:logo_icon:991812:
  //printf("logo_icon - GImageButton >> GEvent." + event + " @ " + millis());
} //_CODE_:logo_icon:991812:

public void logo_text_click(GImageButton source, GEvent event) { //_CODE_:logo_text:570005:
  //printf("logo_text - GImageButton >> GEvent." + event + " @ " + millis());
} //_CODE_:logo_text:570005:

public void slider2d_xy_changed(GSlider2D source, GEvent event) { //_CODE_:slider2d_xy:935079:
  //printf("slider2d_xy - GSlider2D >> GEvent." + event + " @ " + millis());
  val_x_axis.setText(roundTwoDecimals(slider2d_xy.getValueXF()));
  val_y_axis.setText(roundTwoDecimals(slider2d_xy.getValueYF()));
  YZ_UPDATE = true;  
  X_UPDATE = true;
} //_CODE_:slider2d_xy:935079:

public void slider_z_axis_changed(GSlider source, GEvent event) { //_CODE_:slider_z_axis:891404:
  //printf("slider_z_axis - GSlider >> GEvent." + event + " @ " + millis());
  YZ_UPDATE = true;
} //_CODE_:slider_z_axis:891404:

public void knob_hand_axis_changed(GKnob source, GEvent event) { //_CODE_:knob_hand_axis:834379:
  //printf("knob_hand_axis - GKnob >> GEvent." + event + " @ " + millis());
  val_hand_axis.setText(roundTwoDecimals(knob_hand_axis.getValueF()));
  HAND_UPDATE = true;
} //_CODE_:knob_hand_axis:834379:

public void setting_panel_clicked(GPanel source, GEvent event) { //_CODE_:setting_panel:944818:
  //printf("setting_panel - GPanel >> GEvent." + event + " @ " + millis());
} //_CODE_:setting_panel:944818:

public void connect_serial_clicked(GButton source, GEvent event) { //_CODE_:droplist_serial:920274:
  printf("droplist_serial - GDropList >> GEvent." + event + " @ " + millis());
  if (!SERIAL_EN){
    initPort();
  }
  else{
    releasePort();
  }
    
} //_CODE_:droplist_seDisconnect0274:

public void button_rescan_port_clicked(GButton source, GEvent event) { //_CODE_:button_rescan_port:922949:
  printf("button1 - GButton >> GEvent." + event + " @ " + millis());
  droplist_serial.setItems(getUArmPorts(),0);
} //_CODE_:button_rescan_port:922949:

public void cb_leapmotion_clicked(GCheckbox source, GEvent event) { //_CODE_:cb_leapmotion:469722:
  printf("cb_leapmotion - GCheckbox >> GEvent." + event + " @ " + millis());
  LEAP_EN = cb_leapmotion.isSelected();
} //_CODE_:cb_leapmotion:469722:

public void slider_min_z_changed(GSlider source, GEvent event) { //_CODE_:slider_min_z:502052:
  printf("slider_min_z - GSlider >> GEvent." + event + " @ " + millis());
  limit_leap_min_z = slider_min_z.getValueI();
} //_CODE_:slider_min_z:502052:

public void button_grab_clicked(GButton source, GEvent event) { //_CODE_:button_grab:849823:
  //printf("button_grab - GButton >> GEvent." + event + " @ " + millis());
  GRAB_UPDATE = true;
  if(!GRAB_EN){
    button_grab.setText("Release");
    GRAB_EN = true;
  } else {
    button_grab.setText("Catch");
    GRAB_EN = false;
  }
} //_CODE_:button_grab:849823:

public void button_reset_clicked(GButton source, GEvent event) { //_CODE_:button_reset:484659:
  //printf("button_reset - GButton >> GEvent." + event + " @ " + millis());
  reset();
} //_CODE_:button_reset:484659:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setCursor(ARROW);
  surface.setTitle("uArm Control Panel");
  logo_icon = new GImageButton(this, 400, 10, 114, 40, new String[] { "logo.png", "logo.png", "logo.png" } );
  GLabel label_version = new GLabel(this, 520, 20, 100, 20);
  label_version.setText("v" + VERSION);
  slider2d_xy = new GSlider2D(this, 115, 75, 520, 420);
  slider2d_xy.setLimitsX(LIMIT_INIT_X, LIMIT_MIN_X, LIMIT_MAX_X);
  slider2d_xy.setLimitsY(LIMIT_INIT_Y, LIMIT_MAX_Y, LIMIT_MIN_Y);
  slider2d_xy.setNumberFormat(G4P.INTEGER, 0);
  slider2d_xy.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  slider2d_xy.setOpaque(true);
  slider2d_xy.addEventHandler(this, "slider2d_xy_changed");
  label_x_axis = new GLabel(this, 210, 50, 50, 20);
  label_x_axis.setTextAlign(GAlign.LEFT, GAlign.MIDDLE);
  label_x_axis.setText("X AXIS: ");
  label_x_axis.setTextBold();
  label_x_axis.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  label_x_axis.setOpaque(false);
  val_x_axis = new GLabel(this, 270, 50, 50, 20);
  val_x_axis.setTextAlign(GAlign.LEFT, GAlign.MIDDLE);
  val_x_axis.setText("0");
  val_x_axis.setTextBold();
  val_x_axis.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  val_x_axis.setOpaque(false);
  label_y_axis = new GLabel(this, 400, 50, 50, 20);
  label_y_axis.setText("Y AXIS: ");
  label_y_axis.setTextBold();
  label_y_axis.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  label_y_axis.setOpaque(false);
  val_y_axis = new GLabel(this, 450, 50, 80, 20);
  val_y_axis.setText("0");
  val_y_axis.setTextBold();
  val_y_axis.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  val_y_axis.setOpaque(false);
  slider_z_axis = new GSlider(this, 110, 75, 420, 100, 15.0);
  slider_z_axis.setShowValue(true);
  slider_z_axis.setShowLimits(true);
  slider_z_axis.setLimits(LIMIT_INIT_Z, LIMIT_MAX_Z, LIMIT_MIN_Z);
  slider_z_axis.setShowTicks(true);
  slider_z_axis.setEasing(5.0);
  slider_z_axis.setRotation(PI/2, GControlMode.CORNER);
  slider_z_axis.setTextOrientation(G4P.ORIENT_LEFT);
  //slider_z_axis.setNumberFormat(G4P.INTEGER, 0);
  slider_z_axis.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  slider_z_axis.setOpaque(false);
  slider_z_axis.addEventHandler(this, "slider_z_axis_changed");
  label_z_axis = new GLabel(this, 15, 50, 50, 20);
  label_z_axis.setText("Z AXIS:");
  label_z_axis.setTextBold();
  label_z_axis.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  label_z_axis.setOpaque(false); 
  knob_hand_axis = new GKnob(this, 700, 75, 200, 200, 0.8);
  knob_hand_axis.setTurnRange(180, 360);
  knob_hand_axis.setTurnMode(GKnob.CTRL_ANGULAR);
  knob_hand_axis.setShowArcOnly(true);
  knob_hand_axis.setOverArcOnly(true);
  knob_hand_axis.setIncludeOverBezel(false);
  knob_hand_axis.setShowTrack(false);
  knob_hand_axis.setLimits(LIMIT_INIT_HAND, LIMIT_MIN_HAND, LIMIT_MAX_HAND);
  knob_hand_axis.setShowTicks(true);
  //knob_hand_axis.setEasing(10.0);
  knob_hand_axis.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  knob_hand_axis.setOpaque(false);
  knob_hand_axis.addEventHandler(this, "knob_hand_axis_changed");
  label_hand_axis = new GLabel(this, 725, 50, 80, 20);
  label_hand_axis.setText("Hand AXIS:");
  label_hand_axis.setTextBold();
  label_hand_axis.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  label_hand_axis.setOpaque(false);
  val_hand_axis = new GLabel(this, 810, 50, 50, 20);
  val_hand_axis.setTextAlign(GAlign.LEFT, GAlign.MIDDLE);
  val_hand_axis.setText("0");
  val_hand_axis.setTextBold();
  val_hand_axis.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  val_hand_axis.setOpaque(false);
  setting_panel = new GPanel(this, 650, 280, 350, 210, "Setting");
  setting_panel.setCollapsible(false);
  setting_panel.setDraggable(false);
  setting_panel.setText("Setting");
  setting_panel.setTextBold();
  setting_panel.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  setting_panel.setOpaque(true);
  setting_panel.addEventHandler(this, "setting_panel_clicked");
  droplist_serial = new GDropList(this, 10, 25, 180, 80, 3);
  droplist_serial.setItems(loadStrings("list_920274"), 0);
  droplist_serial.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  //droplist_serial.addEventHandler(this, "droplist_serial_clicked");

  button_rescan_port = new GButton(this, 270, 25, 70, 20);
  button_rescan_port.setText("Rescan");
  button_rescan_port.setTextBold();
  button_rescan_port.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  button_rescan_port.addEventHandler(this, "button_rescan_port_clicked");
  
  button_connect_port = new GButton(this, 200, 25, 70, 20);
  button_connect_port.setText("Connect");
  button_connect_port.setTextBold();
  button_connect_port.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  button_connect_port.addEventHandler(this, "connect_serial_clicked"); 
  
  GLabel label_firmware_vesion = new GLabel(this, 10, 55, 120, 29);
  label_firmware_vesion.setText("Firmware Version:");
  
  label_firmware_vesion.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  label_firmware_vesion.setOpaque(false);
  label_firmware_vesion_label = new GLabel(this, 140, 55, 200, 29);
  label_firmware_vesion_label.setText("N/A");
  label_firmware_vesion_label.setTextBold();
  label_firmware_vesion_label.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  label_firmware_vesion_label.setOpaque(false);
  label_firmware_vesion_label.setTextBold();
  cb_leapmotion = new GCheckbox(this, 10, 110, 200, 20);
  cb_leapmotion.setTextAlign(GAlign.LEFT, GAlign.MIDDLE);
  cb_leapmotion.setText("Enable Leap Motion Control");
  cb_leapmotion.setTextBold();
  cb_leapmotion.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  cb_leapmotion.setOpaque(false);
  cb_leapmotion.addEventHandler(this, "cb_leapmotion_clicked");
  slider_min_z = new GSlider(this, 10, 140, 200, 50, 10.0);
  slider_min_z.setShowValue(true);
  slider_min_z.setShowLimits(true);
  slider_min_z.setLimits(LIMIT_INIT_Z, LIMIT_MIN_Z, LIMIT_MAX_Z);
  slider_min_z.setShowTicks(true);
  //slider_min_z.setEasing(10.0);
  slider_min_z.setNumberFormat(G4P.INTEGER, 0);
  slider_min_z.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  slider_min_z.setOpaque(false);
  slider_min_z.addEventHandler(this, "slider_min_z_changed");
  label_leap_min_z = new GLabel(this, 215, 150, 80, 29);
  label_leap_min_z.setText("Minmum Z");
  label_leap_min_z.setTextBold();
  label_leap_min_z.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  label_leap_min_z.setOpaque(false);
  setting_panel.addControl(droplist_serial);
  setting_panel.addControl(button_rescan_port);
  setting_panel.addControl(button_connect_port);
  setting_panel.addControl(label_firmware_vesion);
  setting_panel.addControl(label_firmware_vesion_label);
  setting_panel.addControl(cb_leapmotion);
  setting_panel.addControl(slider_min_z);
  setting_panel.addControl(label_leap_min_z);
  button_grab = new GButton(this, 740, 210, 120, 40);
  button_grab.setText("Catch");
  button_grab.setTextBold();
  button_grab.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  button_grab.addEventHandler(this, "button_grab_clicked");
  button_reset = new GButton(this, 930, 10, 50, 30);
  button_reset.setText("RESET");
  button_reset.setTextBold();
  button_reset.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  button_reset.addEventHandler(this, "button_reset_clicked");
}

GImageButton logo_icon; 
GImageButton logo_text;
GSlider2D slider2d_xy;
GLabel label_y_axis; 
GLabel val_x_axis; 
GLabel label_z_axis; 
GLabel val_y_axis; 
GSlider slider_z_axis; 
GLabel label_x_axis; 
GKnob knob_hand_axis;;
GLabel label_hand_axis; 
GLabel val_hand_axis; 
GPanel setting_panel; 
GDropList droplist_serial; 
GButton button_rescan_port; 
GButton button_connect_port; 
GCheckbox cb_leapmotion; 
GSlider slider_min_z; 
GLabel label_leap_min_z; 
GButton button_grab; 
GButton button_reset; 
GLabel label_firmware_vesion_label;